factory Item.fromMap(Map<String, dynamic> map) {
    return Item(
      id: map["id"],
      name: map["name"],
      desc: map["desc"],
      price: map["price"],
      color: map["color"],
      image: map["image"],
    );
  }

  toMap() => {
        "id": id,
        "name": name,
        "desc": desc,
        "price": price,
        "color": color,
        "image": image,
      };


       Padding(
        padding: const EdgeInsets.all(17.0),
        child: (Catalogmodel.items != null && Catalogmodel.items.isNotEmpty)
            ? GridView.builder(
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    mainAxisSpacing: 17,
                    crossAxisSpacing: 17),
                itemBuilder: (context, index) {
                  final item = Catalogmodel.items[index];
                  return Card(
                      clipBehavior: Clip.antiAlias,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                      child: GridTile(
                        header: Container(
                            decoration: BoxDecoration(color: Colors.deepPurple),
                            padding: const EdgeInsets.all(13),
                            child: Text(
                              item.name,
                              style: TextStyle(color: Colors.white),
                            )),
                        child: Image.network(
                          item.image,
                        ),
                        footer: Container(
                            decoration: BoxDecoration(
                                color: Color.fromARGB(255, 18, 18, 19)),
                            padding: const EdgeInsets.all(13),
                            child: Text(
                              item.price.toString(),
                              style: TextStyle(
                                  color: Color.fromARGB(255, 255, 254, 254)),
                            )),
                      ));
                },
                itemCount: Catalogmodel.items.length,
              )
            : Center(
                child: CircularProgressIndicator(),
              ),
      ),
      drawer: MyDrawer(),